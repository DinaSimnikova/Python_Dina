"""
1. Написать функцию num_translate(), переводящую числительные от 0 до 10 c английского на русский язык.

Если перевод сделать невозможно, вернуть None. Подумайте, как и где лучше хранить информацию, н
еобходимую для перевода: какой тип данных выбрать, в теле функции или снаружи.
"""

translation = {
    'One': 'Один',
    'Two': 'Два',
    'Three': 'Три',
    'Four': 'Четыре',
    'Five': 'Пять',
    'Six': 'Шесть',
    'Seven': 'Семь',
    'Eight': 'Восемь',
    'Nine': 'Девять',
    'Ten': 'Десять'
}

def num_translate(item):
        if item.title() in translation.keys():
            print(translation[item.title()])
        else:
            print(None)

num_translate("seven")

# Или вариант с get, который разбирали на уроке

"""
3. Написать функцию thesaurus(), принимающую в качестве аргументов имена сотрудников и возвращающую словарь, 
в котором ключи — первые буквы имён, а значения — списки, содержащие имена, начинающиеся с соответствующей буквы. Например:
>>> thesaurus("Иван", "Мария", "Петр", "Илья")
{
    "И": ["Иван", "Илья"], 
    "М": ["Мария"], "П": ["Петр"]
}

Подумайте: полезен ли будет вам оператор распаковки? 
Как поступить, если потребуется сортировка по ключам? Можно ли использовать словарь в этом случае?
"""

managers_names = ['Иван', 'Мария', 'Петр', 'Илья']
managers_names_sample = filter(lambda el: el.startswith('И'), managers_names)
print(*managers_names_sample)

def thesaurus (*names):
    names_dict = dict()
    for name in names:
        names_dict.setdefault(name[0], [])
        names_dict[name[0]].append(name)
    return names_dict

print(thesaurus("Вадим", "Сергей", "Константин", "Кирилл"))

"""
Реализовать функцию get_jokes(), возвращающую n шуток, сформированных из трех случайных слов, взятых из трёх списков (по одному из каждого):
nouns = ["автомобиль", "лес", "огонь", "город", "дом"]
adverbs = ["сегодня", "вчера", "завтра", "позавчера", "ночью"]
adjectives = ["веселый", "яркий", "зеленый", "утопичный", "мягкий"]

Например:
>>> get_jokes(2)
["лес завтра зеленый", "город вчера веселый"]

Документировать код функции.
Сможете ли вы добавить еще один аргумент — флаг, разрешающий или запрещающий повторы слов в шутках (когда каждое слово можно использовать только в одной шутке)? Сможете ли вы сделать аргументы именованными?
"""

import random
nouns = ["автомобиль", "лес", "огонь", "город", "дом"]
adverbs = ["сегодня", "вчера", "завтра", "позавчера", "ночью"]
adjectives = ["веселый", "яркий", "зеленый", "утопичный", "мягкий"]

def jokes(num):
    jokes_list = []
    for i in range(num):
        cur_nouns = random.choice(nouns)
        cur_adverbs = random.choice(adverbs)
        cur_adjectives = random.choice(adjectives)
        jokes_list.append(f'{cur_nouns} {cur_adverbs} {cur_adjectives}')
    return jokes_list

print(jokes(3))
print(jokes(4))
